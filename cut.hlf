%hlf.

small: type. 
big: type.
s: small.
b: small -> big.

%{ == Syntax == }%

pol: type.
⁺: pol.
⁻: pol.

%{ We define propositions in an environment with free atoms. }%
atom: pol -> type.
%block atom⁺: block {Q⁺: atom ⁺}.
%block atom⁻: block {Q⁻: atom ⁻}.

typ: pol -> type.
a: atom P -> typ P.

↓: typ ⁻ -> typ ⁺.
!: typ ⁻ -> typ ⁺.
1: typ ⁺.
⊗: typ ⁺ -> typ ⁺ -> typ ⁺. %infix none 5 ⊗.

↑: typ ⁺ -> typ ⁻.
⊸: typ ⁺ -> typ ⁻ -> typ ⁻. %infix none 5 ⊸.


%{ === Sequent calculus === }%

%{ The judgments of the focused language (or, alternatively, syntax of 
intrinsically typed spine form judgments) }%

%{ Hypothetical judgments }%
susp⁺: typ ⁺ -> @type. %name susp⁺ Z z.
hyp: typ ⁻ -> @type. %name hyp X x.
%block zatom: some {Q : atom ⁺} block {w}{z: susp⁺ (a Q) w}.
%block xpers: some {A : typ ⁻} block {x: hyp A e}.
%block xeph: some {A : typ ⁻} block {w}{x: hyp A w}. 

%{ An inversion or focus context Ω is a list of positive propositions. }%
invctx: type. %name invctx _Ω.
·: invctx.
,: typ ⁺ -> invctx -> invctx. %infix right 3 ,.
 
%{ Succedents }%
stablesuc: type.
susp⁻: typ ⁻ -> stablesuc. 
true: typ ⁺ -> stablesuc.
suc: type.
inv: typ ⁻ -> suc.
stab: stablesuc -> suc.

%{ Sequent forms }%
seqform: type.
valform: typ ⁺ -> seqform.
termform: invctx -> suc -> seqform.
spineform: typ ⁻ -> stablesuc -> seqform.
exp: seqform -> @type.
%abbrev val = [A⁺] exp (valform A⁺).
%abbrev term = [_Ω][U] exp (termform _Ω U).
%abbrev spine = [A⁻][U] exp (spineform A⁻ U).

%block v : some {A⁺: typ ⁺} block {w}{v: val A⁺ w}.
%block sp : some {A⁻: typ ⁻} block {w}{γ}{sp: spine A⁻ γ w}.



%.

succ: type.
exp: count -> succ -> @type.
iconc: prop - -> succ. % A-
conc:  prop + -> succ. % A+
rsusp: prop - -> succ. % <A->
rfoc:  prop + -> succ. % [A+]

ihyp:  prop + -> @type.
hyp:   prop - -> @type.
lsusp: prop + -> @type.
lfoc:  prop - -> @type.
%block 

focusR:
  exp foc (rfoc A)
  -o exp z (conc A).

focusL:
  (lfoc A -o exp foc U)
  -o (hyp A -o exp foc U).  

eta+:
  (lsusp (a Q) -o exp N U)
  -o (ihyp (a Q) -o exp (s N) U).

id+: 
  lsusp A -o exp foc (rfoc A).

eta-:
  exp N (rsusp (a Q))
  -o exp (s N) (iconc (a Q)).

id-: 
  lfoc A -o exp foc (rsusp A).

fR: 
  exp N (conc A)
  -o exp (s N) (iconc (f A)).
 
fL:
  (ihyp A -o exp (s z) U)
  -o (lfoc (f A) -o exp foc U).

uR:
  exp (s z) (iconc A)
  -o exp foc (rfoc (u A)).

uL:
  (hyp A -o exp N U)
  -o (ihyp (u A) -o exp N U).

bangR: 
  exp (s N) (iconc A)
  -o exp foc (rfoc (bang A)).

bangL:
  (hyp A -> exp N U)
  -o (ihyp (bang A) -o exp (s N) U).

oneR:
  exp foc (rfoc one). % note: removing this dot raises match

oneL:
  exp N U
  -o (ihyp one -o exp (s N) U).

tensorR:
  exp foc (rfoc A)
  -o exp foc (rfoc B)
  -o exp foc (rfoc (tensor A B)).

tensorL:
  (ihyp A -o ihyp B -o exp (s N) U)
  -o (ihyp (tensor A B) -o exp N U).

lolliR: 
  (ihyp A -o exp (s N) (iconc B))
  -o exp N (iconc (lolli A B)).

lolliL:
  exp foc (rfoc A)
  -o (lfoc B -o exp foc U)
  -o (lfoc (lolli A B) -o exp foc U).